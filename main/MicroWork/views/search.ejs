<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Results - Gigs</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .sticky-header {
            position: sticky;
            top: 0;
            z-index: 30;
        }
        /* Simple animation for added skill tags */
        @keyframes pop-in {
            0% { transform: scale(0.8); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
        .skill-tag {
            animation: pop-in 0.2s ease-out;
        }
    </style>
</head>
<body class="bg-gray-50">

    <!-- Header & Search Bar -->
    <header class="sticky-header bg-white shadow-md">
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-20">
                <div class="flex items-center gap-4">
                    <a href="/" class="flex items-center gap-2 text-2xl font-bold text-gray-800">
                        <span class="bg-red-600 w-8 h-8 rounded-full flex items-center justify-center font-bold text-lg text-white">GG</span>
                        <span class="hidden sm:inline align-middle">GIGS</span>
                    </a>
                </div>
                <div class="flex items-center gap-2 sm:gap-4">
                    <a href="#" id="nav-create-resume" class="px-4 py-2 text-sm font-medium rounded-lg text-gray-700 border border-gray-300 hover:bg-gray-100 transition-colors">Create Resume</a>
                    <a href="#" id="nav-sign-in" class="px-4 py-2 text-sm font-medium rounded-lg text-gray-700 border border-gray-300 hover:bg-gray-100 transition-colors">Sign In</a>
                    <!-- Language Selector -->
                    <div class="relative" id="lang-switcher">
                        <button id="lang-button" class="flex items-center gap-1 px-3 py-2 text-sm font-medium rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-100 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3 5h12M9 3v2m4 13l4-4M19 9l-4 4M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span id="current-lang">EN</span>
                        </button>
                        <div id="lang-menu" class="hidden absolute right-0 mt-2 w-28 bg-white rounded-md shadow-lg py-1 z-20">
                            <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-lang="en">English</a>
                            <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-lang="ru">Русский</a>
                            <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-lang="kk">Қазақша</a>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
        <div class="border-t border-gray-200">
             <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                <form id="header-search-form" action="/search" method="GET" class="flex items-center bg-white rounded-lg border border-gray-300 overflow-hidden">
                    <div class="pl-4 text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
                    </div>
                    <input type="text" id="search-input" name="query" class="w-full py-3 px-4 text-gray-800 placeholder-gray-500 focus:outline-none" placeholder="Profession, position, or company" value="<%= query %>">
                    <button type="submit" id="search-button" class="bg-blue-600 text-white font-semibold px-8 py-3 hover:bg-blue-700 transition-colors">Find</button>
                </form>
             </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div id="results-count" class="mb-6 text-xl font-semibold text-gray-800">
            Found <%= tasks.length %> tasks
        </div>
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <!-- Filters Column -->
            <aside class="lg:col-span-1">
                 <form id="filter-form" action="/search" method="GET" class="bg-white p-6 rounded-lg shadow-md space-y-6">
                    <div class="bg-blue-600 text-white flex justify-center items-center px-8 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                        <nav>
                            <a href="../public/map/index.html" class="font-bold">На Карте</a>
                        </nav>
                    </div>
                    <div class="flex justify-between items-center border-b pb-3">
                        <h3 id="filters-title" class="text-lg font-bold">Filters</h3>
                        <button type="button" id="filters-reset" class="text-sm text-blue-600 hover:underline">Reset</button>
                    </div>
                    
                    <!-- Hidden input for main query to persist it during filtering -->
                    <input type="hidden" name="query" value="<%= query %>">

                    <!-- Skills Filter -->
                    <div>
                        <label for="skills-input" id="skills-label" class="block text-sm font-medium text-gray-700 mb-1">Skills</label>
                        <div class="flex gap-2">
                           <input type="text" id="skills-input" class="block w-full rounded-md border-gray-300 shadow-sm" placeholder="e.g., JavaScript">
                           <button type="button" id="add-skill-btn" class="bg-gray-200 px-3 rounded-md hover:bg-gray-300 text-sm font-bold">+</button>
                        </div>
                        <div id="skills-container" class="mt-2 flex flex-wrap gap-2">
                           <!-- Hidden skill inputs and visible tags will be added here -->
                        </div>
                    </div>

                    <!-- Location Filter -->
                    <div>
                        <label for="location" id="location-label" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                        <input type="text" name="location" id="location" class="block w-full rounded-md border-gray-300 shadow-sm" placeholder="e.g., Astana">
                    </div>

                    <!-- Task Format Filter -->
                    <div>
                        <label id="format-label" class="block text-sm font-medium text-gray-700 mb-2">Format</label>
                        <div class="space-y-2">
                            <div class="flex items-center"><input name="format" value="Online" id="format-online" type="checkbox" class="h-4 w-4 rounded"><label for="format-online" class="ml-2 text-sm">Online</label></div>
                            <div class="flex items-center"><input name="format" value="In-person" id="format-inperson" type="checkbox" class="h-4 w-4 rounded"><label for="format-inperson" class="ml-2 text-sm">In-person</label></div>
                            <div class="flex items-center"><input name="format" value="Hybrid" id="format-hybrid" type="checkbox" class="h-4 w-4 rounded"><label for="format-hybrid" class="ml-2 text-sm">Hybrid</label></div>
                        </div>
                    </div>

                    <!-- Duration Filter -->
                    <div>
                        <label for="duration-select" id="duration-label" class="block text-sm font-medium text-gray-700 mb-1">Duration</label>
                        <select name="duration" id="duration-select" class="block w-full rounded-md border-gray-300 shadow-sm">
                            <option value="Any">Any</option>
                            <option value="Less than a day">Less than a day</option>
                            <option value="1-3 days">1-3 days</option>
                            <option value="About a week">About a week</option>
                            <option value="More than a week">More than a week</option>
                        </select>
                    </div>

                     <!-- Education Filter -->
                    <div>
                        <label for="education-select" id="education-label" class="block text-sm font-medium text-gray-700 mb-1">Education</label>
                        <select name="education" id="education-select" class="block w-full rounded-md border-gray-300 shadow-sm">
                            <option value="Any level">Any level</option>
                            <option value="High School">High School</option>
                            <option value="Bachelor's Degree">Bachelor's Degree</option>
                            <option value="Master's Degree">Master's Degree</option>
                        </select>
                    </div>

                    <!-- Special Categories Filter -->
                    <div>
                        <label id="special-label" class="block text-sm font-medium text-gray-700 mb-2">Special Categories</label>
                        <div class="space-y-2">
                            <div class="flex items-center"><input name="special" value="Suitable for students" id="cat-students" type="checkbox" class="h-4 w-4 rounded"><label for="cat-students" class="ml-2 text-sm">Suitable for students</label></div>
                            <div class="flex items-center"><input name="special" value="Accessible" id="cat-disabilities" type="checkbox" class="h-4 w-4 rounded"><label for="cat-disabilities" class="ml-2 text-sm">Accessible</label></div>
                        </div>
                    </div>
                </form>
            </aside>

            <!-- Search Results Column -->
            <div class="lg:col-span-3">
                <div class="space-y-6">
                    <% if (tasks && tasks.length > 0) { %>
                        <% tasks.forEach(task => { %>
                            <%- include('partials/task-card', {task: task}) %>
                        <% }) %>
                    <% } else { %>
                        <div class="bg-white p-8 text-center rounded-lg shadow-md">
                            <h3 id="no-results-title" class="text-2xl font-bold text-gray-800">No tasks found</h3>
                            <p id="no-results-desc" class="text-gray-600 mt-2">Try adjusting your search terms or filters.</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <script src="/public/main.js" defer></script>
    <script src="/public/translator.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const filterForm = document.getElementById('filter-form');
            const skillsInput = document.getElementById('skills-input');
            const addSkillBtn = document.getElementById('add-skill-btn');
            const skillsContainer = document.getElementById('skills-container');
            const resetBtn = document.getElementById('filters-reset');

            // Function to add a skill tag and its corresponding hidden input
            const addSkill = (skill) => {
                const skillValue = skill.trim();
                if (!skillValue || document.querySelector(`[data-skill="${skillValue}"]`)) return;

                // Create hidden input for form submission
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'skills';
                hiddenInput.value = skillValue;
                hiddenInput.dataset.skillInput = skillValue; // Link to the tag
                skillsContainer.appendChild(hiddenInput);

                // Create visible tag
                const tag = document.createElement('div');
                tag.className = 'skill-tag bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-1 rounded-full flex items-center gap-2';
                tag.dataset.skill = skillValue;
                tag.innerHTML = `<span>${skillValue}</span><button type="button" class="remove-skill-btn text-blue-500 hover:text-blue-700">&times;</button>`;
                skillsContainer.appendChild(tag);
                
                skillsInput.value = '';
            };

            // Function to repopulate filters from URL on page load
            const populateFilters = () => {
                const filters = <%- JSON.stringify(filters || {}) %>;
                
                if (filters.location) document.getElementById('location').value = filters.location;
                
                if(filters.format) (Array.isArray(filters.format) ? filters.format : [filters.format]).forEach(val => {
                    const el = document.querySelector(`input[name="format"][value="${val}"]`);
                    if (el) el.checked = true;
                });

                if(filters.duration) document.getElementById('duration-select').value = filters.duration;
                if(filters.education) document.getElementById('education-select').value = filters.education;

                if(filters.special) (Array.isArray(filters.special) ? filters.special : [filters.special]).forEach(val => {
                    const el = document.querySelector(`input[name="special"][value="${val}"]`);
                    if (el) el.checked = true;
                });

                if(filters.skills) (Array.isArray(filters.skills) ? filters.skills : [filters.skills]).forEach(skill => addSkill(skill));
            };

            // Event Listeners
            addSkillBtn.addEventListener('click', () => addSkill(skillsInput.value));
            skillsInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    addSkill(skillsInput.value);
                }
            });

            skillsContainer.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-skill-btn')) {
                    const tag = e.target.closest('.skill-tag');
                    const skillValue = tag.dataset.skill;
                    document.querySelector(`[data-skill-input="${skillValue}"]`).remove(); // remove hidden input
                    tag.remove(); // remove visible tag
                    filterForm.submit(); // Re-submit after removing a skill
                }
            });

            // Auto-submit form when any filter changes
            filterForm.addEventListener('change', (e) => {
                // We don't want to submit for text inputs on every keystroke
                if (e.target.type !== 'text' && e.target.type !== 'search') {
                    filterForm.submit();
                }
            });

             filterForm.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && (e.target.type === 'text' || e.target.type === 'search')) {
                    filterForm.submit();
                }
            });
            
            // Handle reset button
            resetBtn.addEventListener('click', () => {
                const query = document.querySelector('input[name="query"]').value;
                // Redirect to search page with only the main query, clearing all filters
                window.location.href = `/search?query=${encodeURIComponent(query)}`;
            });

            // Initial population of filters on page load
            populateFilters();
        });
    </script>
</body>
</html>